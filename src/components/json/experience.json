{
    "history": {
        "current": {
            "employer": "Current Lighting Solutions",
            "work_start": "May 2024",
            "work_end": "August 2024",
            "tasks": {
                "diagnostics_app": {
                    "name": "EZ Connect Diagnostics App",
                    "skills": ["Flutter", "Dart", "IoT", "Bluetooth LE","Mobile App Development"],
                    "tidbits": ["Create mobile application to help field engineers diagnose sensor issues","Port iOS Objective-C code to Dart", "Create GUI in Flutter", "Implement new diagnostic tools for \"people-counting\" sensors"],
                    "description": "The EZ Connect Diagnostics app helps Current field engineers diagnose Current-made sensors.\n\nThis task taught me how to work with Bluetooth Low-Energy (\"BLE\") devices in mobile applications. I also got practice creating mobile GUIs.\n\nI worked on this application assuming my GUI was temporary (and would either be drastically modified, or thrown away entirely). As such, I took the initiative to develop the GUI and logic (such as code that interacts with Bluetooth) as separate layers. This approach facilitates the creation of a new GUI; the \"logic layer\" handles all under-the-hood functionality, and provides any information the GUI may need as primitive data."
                },
                "dali_driver_programmer": {
                    "name": "DALI Driver Programmer",
                    "skills": ["QT", "Python", "IoT"],
                    "tidbits": ["Transform prototype application into a fully-functional application", "Finish implementing unfinished or unimplemented code", "Gather feedback from factory (end-user), implement it, and ship the final product"],
                    "description": "The DALI Driver Programmer software can configure an LED driver to instruct a connected lighting fixture on how to behave.\n\nTo clarify, a \"lighting fixture\" is essentially a type of light, like a lamp or a ceiling light. It isn't a light BULB, but rather what a light bulb may be scewed into. An \"LED driver\" provides a configuration for the fixture - properties like the maxiumum and minimum output current.\n\nMy task was to turn a pre-existing GUI prototype application into a finished product.\n\nAfter learning the codebase for the program, I had to implement missing functionality, finish the GUI (like reworking it to use threading to allow for progress bars and implement UX enhancements for easier usability), and implement feedback from a factory using this program in production.\n\nAs far as I know, the code I wrote is still used by that factory today."
                }
            }
        },
        "xngage": {
            "employer": "Xngage",
            "work_start": "June 2023",
            "work_end": "July 2023",
            "tasks": {
                "runbook": {
                    "name": "Automatic Runbook Generator",
                    "skills": ["C#", ".NET", "OpenXML"],
                    "tidbits": ["Create application that automatically generates \"runbook\" document based on desired parameters", "Use OpenXML to programatically generate Microsoft Word document"],
                    "description": "The automatic runbook generator takes desired parameters and creates a \"runbook\" document. This document outlines work that Xngage will do for a client who is purchasing their services.\n\nMy tasks involved learning how to programatically write a Microsoft Word document. I learned about the OpenXML format - the format used by .docx files under-the-hood.\n\nSome challenges I recall from this task involved handling tables (for example, how to specify wide and narrow columns. Some tables had more columns than others, and I wanted to write reusable code!), handling formatting (for example, since OpenXML's handling of different font weights is... verbose... I wrote a very basic markdown parser so that a string with bold and non-bold formatting could simply be written as \"this is my *bolded* string\", instead of needing to directly work with more function calls to handle every single change in formatting), and learning the OpenXML format."
                },
                "backups": {
                    "name": "Automatic Database Backup Utility",
                    "skills": ["PowerShell", "TeamCity", "Azure DevOps"],
                    "tidbits": ["Write PowerShell script that automatically backs up SQL Database and saves it to Microsoft Azure cloud hosting instance", "Integrate this script into JetBrains TeamCity"],
                    "description": "This utility automatically backs up any database in Xngage's TeamCity instance in the click of a button.\n\nPreviously, employees had to perform these backups manually (perhaps needing to nag their tech lead to ask them to do it).\n\nMy script replaces this tedious procedure with a simple workflow. The employee logs in to Xngage's TeamCity instance, finds the client whose database they'd like to backup, and starts a \"backup job.\" This job will run my PowerShell script. This script handles backups in Xngage's Azure DevOps cloud storage.\n\nFirst, it will check for any previous backups made by the script and delete them (but not delete any other scripts). Then, it will generate a \".bacpac\" file containing the requested database backup. Finally, the script will send a message to a Slack channel in Xngage's Slack server, providing a link to the .bacpac file."
                }
            }
        }
    }
}